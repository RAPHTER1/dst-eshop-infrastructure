- name: Fail if GitLab API token is not defined
  fail:
    msg: "GITLAB_API_TOKEN is not set. Please export it in your .env.local or CI/CD variables."
  when: lookup('env', 'GITLAB_API_TOKEN') is not defined
  delegate_to: localhost

- name: Copy manifest to target
  copy:
    src: gitlab_sa.yaml
    dest: /tmp/gitlab_sa.yaml
    mode: '0644'

- name: Apply manifest with k8s module **from the target host**
  kubernetes.core.k8s:
    state: present
    src: /tmp/gitlab_sa.yaml
    kubeconfig: /home/ubuntu/.kube/config
    context: microk8s
  become: true

- name: Get GitLab CI SA token
  shell: >
    microk8s kubectl -n kube-system get secret \
    -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='gitlab-ci')].data.token}" | base64 -d
  register: gitlab_ci_sa_token
  become: true
  no_log: true

- name: Debug token (only if DEBUG=true)
  debug:
    msg: "GitLab CI token: {{ gitlab_ci_sa_token.stdout }}"
  when: lookup('env', 'DEBUG') == 'true'

- name: Read MicroK8s CA Certificate
  slurp:
    src: /var/snap/microk8s/current/certs/ca.crt
  register: ca_cert_raw
  become: true

- name: Decode CA cert and export
  set_fact:
    k8s_ca_cert_b64: "{{ ca_cert_raw['content'] }}"

# 1. Rendre le template en mémoire (aucun fichier écrit)
- name: Render kubeconfig to variable
  set_fact:
    rendered_kubeconfig: >-
      {{ lookup('template', role_path + '/templates/kubeconfig_gitlab.yml.j2',
                k8s_api_public_url        = lookup('env','K8S_API_PUBLIC_URL'),
                gitlab_ci_sa_token        = gitlab_ci_sa_token.stdout,
                k8s_ca_cert_b64            = k8s_ca_cert_b64) }}
  delegate_to: localhost

# 2. Encoder directement en base64
- name: Encode kubeconfig to base64
  set_fact:
    kubeconfig_gitlab_b64: "{{ rendered_kubeconfig | b64encode }}"
  delegate_to: localhost

# 3. Récupérer la variable existante
- name: Get current GitLab project variable
  uri:
    url: "https://gitlab.com/api/v4/projects/{{ lookup('env','CI_PROJECT_ID') }}/variables/KUBECONFIG_GITLAB_B64"
    headers:
      PRIVATE-TOKEN: "{{ lookup('env','GITLAB_API_TOKEN') }}"
    method: GET
  register: gitlab_var
  failed_when: false
  delegate_to: localhost

# 4. Mettre à jour uniquement si nécessaire
- name: Upsert GitLab variable KUBECONFIG_GITLAB_B64
  uri:
    url: >-
      https://gitlab.com/api/v4/projects/{{ lookup('env','CI_PROJECT_ID') }}/variables
      {% if gitlab_var.status == 200 %}/KUBECONFIG_GITLAB_B64{% endif %}
    method: "{{ 'PUT' if gitlab_var.status == 200 else 'POST' }}"
    headers:
      PRIVATE-TOKEN: "{{ lookup('env','GITLAB_API_TOKEN') }}"
    body_format: form-urlencoded
    body: >-
      {% if gitlab_var.status != 200 %}key=KUBECONFIG_GITLAB_B64&{% endif %}
      value={{ kubeconfig_gitlab_b64 }}&masked=true&protected=true
    status_code: [200, 201]
  when: gitlab_var.status != 200 or gitlab_var.json.value != kubeconfig_gitlab_b64
  delegate_to: localhost
